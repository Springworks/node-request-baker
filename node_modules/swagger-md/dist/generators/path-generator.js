'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _schemaGenerator = require('./schema-generator');

var _schemaGenerator2 = _interopRequireDefault(_schemaGenerator);

var _requestParametersTable = require('./request-parameters-table');

var _requestParametersTable2 = _interopRequireDefault(_requestParametersTable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Generates markdown for a specific Swagger path,
 * including all of its methods.
 */

function generateMethods(path_key, path, response_example_provider) {
  return Object.keys(path).map(method => {
    const method_spec = path[method];
    return [`### ${method.toUpperCase()} ${path_key}`, deprecationWarning(method_spec), method_spec.description, externalDocs(method_spec, 'description'), externalDocs(method_spec, 'url'), generateParameters(method_spec.parameters || []), generateBodySchema(method_spec.parameters || []), generateResponses(method_spec.responses), generateExampleResponse(path_key, method, response_example_provider)].filter(Boolean).join('\n\n');
  });
}

function generateParameters(params) {
  const table = (0, _requestParametersTable2.default)(params);
  return table && `**Parameters**\n\n${table}`;
}

function generateBodySchema(params) {
  const body = params.filter(param => param.in === 'body')[0];
  if (!body || !body.schema || body.schema.$ref) {
    return undefined;
  }
  const list = _schemaGenerator2.default.createSchemaList(body.schema);
  return `**Request Body**\n\n${list}`;
}

function generateResponses(responses) {
  return Object.keys(responses).map(response_key => {
    const response = responses[response_key];
    const schema = generateResponseSchema(response);
    return [`#### Response: ${response_key}`, response.description, '**Schema**', schema].join('\n\n');
  }).join('\n\n');
}

function generateResponseSchema(response) {
  if (!response.schema) {
    return 'N/A';
  }
  return _schemaGenerator2.default.createSchemaList(response.schema);
}

function generateExampleResponse(path_key, method, response_example_provider) {
  if (!response_example_provider) {
    return undefined;
  }
  const example_response = response_example_provider(path_key.toLowerCase(), method.toLowerCase());
  return ['#### Example response', example_response].join('\n\n');
}

function deprecationWarning(spec) {
  return spec.deprecated ? '> :warning: **deprecated**' : null;
}

function externalDocs(spec, key) {
  return spec.externalDocs && spec.externalDocs[key] ? spec.externalDocs[key] : null;
}

const api = {
  generatePath: function generatePath(path_key, path, response_example_provider) {
    return generateMethods(path_key, path, response_example_provider).join('\n\n');
  }
};

exports.default = api;